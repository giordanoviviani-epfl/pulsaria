version: 1
disable_existing_loggers: false

# Formatters
formatters:
  basic:
    format: "[%(levelname)s]: %(message)s"

  positional:
    format: "[%(levelname)s|%(module)s|%(lineno)d]: %(message)s"

  dated:
    format: "[%(levelname)s|%(module)s|%(lineno)d] %(asctime)s: %(message)s (%(name)s)"
    datefmt: "%Y-%m-%dT%H:%M:%S%z"

  json:
    (): logging_setup.logger_setup.JSONFormatter
    fmt_keys:
      level: levelname
      levelno: levelno
      message: message
      timestamp: timestamp
      logger: name
      module: module
      function: funcName
      line: lineno
      thread_name: threadName

# Filters
filters:
  no_errors:
    (): logging_setup.logger_setup.NonErrorFilter

# Handlers
handlers:
  console:
    class: logging.StreamHandler
    level: DEBUG
    formatter: basic
    stream: ext://sys.stdout
    filters:
    - no_errors

  console_err:
    class: logging.StreamHandler
    level: WARNING
    formatter: positional
    stream: ext://sys.stderr

  file:
    class: logging.handlers.RotatingFileHandler
    filename: logs/pulsaria.log
    level: DEBUG
    formatter: dated
    maxBytes: 10485760 # 10MB
    backupCount: 5

  file_json:
    class: logging.handlers.RotatingFileHandler
    filename: logs/pulsaria.log.jsonl
    level: DEBUG
    formatter: json
    maxBytes: 10485760 # 10 MB
    backupCount: 5

  # Queue handler to improve performance with logs.
  # By doing so the log calls are not syncronous and locking but are sent to a
  # queue that later handles how the call is handled by the handlers.
  queue_handler:
    class: logging.handlers.QueueHandler
    handlers:
    - file
    - file_json
    respect_handler_level: true

# Loggers
loggers:
  root:
    level: DEBUG
    handlers:
    - queue_handler
    - console
    - console_err
